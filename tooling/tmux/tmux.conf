
## general #####################################################################

# set default shell
set-option -g default-shell /bin/bash

# change shortcut key binding
unbind C-b
set -g prefix `
bind ` send-prefix

## interactions ################################################################

# vi key bindings in copy mode
setw -g mode-keys vi

## copy-paste

# setup 'v' to begin selection as in nvim
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "xsel --clipboard"

# update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "xsel --clipboard"

# bind p to paste selected/copied value
bind p run "pbpaste | tmux load-buffer - && tmux paste-buffer"

## appearance ##################################################################

# for colors in tmux
set -g default-terminal "screen-256color"

# for colors in terminal/nvim to work, I guess...
set-option -sa terminal-features ',XXX:RGB'

# enable pane borders and set to something useful
set -g pane-border-status top
set -g pane-border-format " #{pane_index} - #{pane_current_path} "

## status bar ##################################################################

# TODO: revisit

# enable --ugly-- status bar
set -g status on

# move to bottom
set-option -g status-position bottom

# remainder is copied from an online source, will revisit later
set -g status-left-length 85
set -g status-left "working on#[fg=default] #S"

set -g window-status-current-format "#[fg=default,bold bg=default]│#[fg=default bg=default]#W#[fg=default,bold bg=default]│"
set -g status-style bg=default

set -g status-right "#[fg=default] #[bg=default] %b %d %Y %l:%M %p"
set -g status-justify centre

## navigation ##################################################################

# smart pane switching with awareness of Vim splits; see: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

## panes, windows, splits, oh my ###############################################

# create "rename-pane" binding
bind-key . command-prompt -p "(rename-pane)" "select-pane -T %1"

# more intuitive shortcuts for splitting windows
bind-key - split-window         # "vertical" split (one above, one below)
bind-key | split-window -h      # "horizontal" split (one left, one right)

# shortcuts to hide a pane and bring it back
bind-key ! break-pane -d -n _hidden_pane
bind-key @ join-pane -s $.0

# resize w/ H, J, K, L
bind-key -n S-Left resize-pane -L 2
bind-key -n S-Right resize-pane -R 2
bind-key -n S-Down resize-pane -D 1
bind-key -n S-Up resize-pane -U 1
bind-key -n C-Left resize-pane -L 10
bind-key -n C-Right resize-pane -R 10
bind-key -n C-Down resize-pane -D 5
bind-key -n C-Up resize-pane -U 5

## plugins #####################################################################

# list of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'Morantron/tmux-fingers'     # TODO: configure
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

## plugin conf #################################################################

## session persistence

# state dir should reside in $HOME/config instead of home (unfortunately can't use
# var, must use literal: https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/save_dir.md)
set -g @resurrect-dir "${HOME}/.config/tmux/resurrect"

# enable automatic session saving and persistence
set -g @continuum-restore 'on'
set -g @resurrect-capture-pane-contents 'on'

# enable and configure tmux auto-boot
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'fullscreen'

## plugin manager

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# TODO: figure out why that env var's value is out of date when tmux-sourcing this file
# run "${TMUX_ROOT_PUB}/plugins/tpm/tpm"
run "${HOME}/.config/tmux/plugins/tpm/tpm"

