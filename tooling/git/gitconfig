[user]
    email      = austin@pryvate.email
    name       = Austin Sherron
    signingkey = D55F49224387A57E0FDB80E1494E1B61A3505B41

[core]
    editor       = nvim
    excludesfile = /Users/austinsherron/.gitignore
[alias]
    checkoutr   = checkout
    clear       = !git reset HEAD && git checkout -- .
    clearp      = !git reset HEAD \"$1\" && git checkout -- \"$1\"
    df          = diff 
    diff        = diff -M
    hdiff       = diff HEAD 
    home        = checkout master
    in-branches = branch --contains
    jreset      = !BRANCH=`git jstatus | sed -n '2 p' | awk -F ' +' '{print $3}'` && git reset --hard ${BRANCH}
    ls          = "!git branch | grep -v STORAGE"
    merc        = merge --log --no-ff
    mmerge      = merge master
    mrebase     = rebase master
    mylog       = log --author austin.sherron
    new-branch  = "!git checkout -b \"$1\"\\/\"$2\" #"
    publish     = !BRANCH=`git rev-parse --abbrev-ref HEAD` && git push -u origin ${BRANCH} 
    radd        = !ROOT=`git rev-parse --show-toplevel` && git add ${ROOT}
    rdel        = "!git push origin :\"$1\" #"
    rls         = "!git ls-remote | grep -v \"HEAD\\|refs/heads/master\""
    squash      = rebase -i
    st          = status
    undo        = checkout --
    unstage     = reset HEAD
    wipeout     = !git unstage && git undo && git clean -fd

    # [stash]
    s   = stash
    sl  = stash list
    sft = stash show stash@{0}
    sst = stash show -p stash@{0}
    sf  = "!git stash show stash@{\"$1\"} #"
    ss  = "!git stash show -p stash@{\"$1\"} #"
    sat = stash apply stash@{0}
    sa  = "!git stash apply stash@{\"$1\"} #"
    spt = stash pop stash@{0}
    sp  = "!git stash pop stash@{\"$1\"} #"
    sdt = stash drop stash@{0}
    sd  = "!git stash drop stash@{\"$1\"} #"

    # [fuzzy] 
    fcheckout       = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git checkout ${BRANCH}
    frcheckout      = !BRANCH=`git ls-remote | fzf --height=5 +i +m -e` && git checkout ${BRANCH}
    frdiff          = !BRANCH=`git rls $@ | sed 's/.*refs\\/heads\\///' | fzf --height=5 +i +m -e` && git diff ${BRANCH}
    fdel            = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git branch -d ${BRANCH}
    frdel           = !BRANCH=`git rls $@ | sed 's/.*refs\\/heads\\///' | fzf --height=5 +i +m -e` && git rdel ${BRANCH}
    ffdel           = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git branch -D ${BRANCH}
    fmerge          = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git merge ${BRANCH}
    fmerc           = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git merc ${BRANCH}
    frebase         = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git rebase ${BRANCH}
    flog            = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git log ${BRANCH}
    fdiff           = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git diff ${BRANCH}
    # what commits are in that branch that aren't in this one (includes merges)
    fcdiff          = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git log HEAD..${BRANCH}
    # what commits are in this branch that aren't in that one (includes merges)
    frcdiff         = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git log ${BRANCH}..HEAD
    # what commits are in that branch that aren't in this one
    fcinthatnotthis = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git log --no-merges HEAD..${BRANCH}
    # what commits are in this branch that aren't in that one
    fcinthisnotthat = !BRANCH=`git ls $@ | fzf --height=5 +i +m -e` && git log --no-merges ${BRANCH}..HEAD 
[push]
    default = upstream
[pull]
    ff = only
[credential]
    helper = store
[commit]
    gpgsign = true
[url "https://user@hostname"]
    insteadOf = ssh://git@hostname
[url "https://x-access-token@github.com"]
    insteadOf = ssh://git@github.com
[url "https://x-access-token@127.0.0.1:54480"]
    insteadOf = ssh://git@127.0.0.1:54480
[url "https://x-access-token@some-host"]
    insteadOf = ssh://git@some-host
[url "https://x-access-token@127.0.0.1:56799"]
    insteadOf = ssh://git@127.0.0.1:56799

# slightly different configs for work (i.e.: user, branch name format, etc.)
[includeIf "gitdir:~/sigma/**"]
    path = .gitconfig-sigma

