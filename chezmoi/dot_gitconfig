[user]
    email      = austin@pryvate.email
    name       = Austin Sherron
    # FIXME: not working on mac, even after importing the key
    # signingkey = D55F49224387A57E0FDB80E1494E1B61A3505B41
[core]
    excludesfile = /Users/austinsherron/.gitignore
[alias]
    checkoutr   = checkout
    diff        = diff -M
    hdiff       = diff HEAD
    home        = checkout master
    in-branches = branch --contains
    ls          = "!git branch | grep -v STORAGE"
    merc        = merge --log --no-ff
    mmerge      = merge master
    mrebase     = rebase master
    mylog       = log --author austin.sherron
    new-branch  = "!git checkout -b \"$1\"\\/\"$2\" #"
    publish     = !BRANCH=`git rev-parse --abbrev-ref HEAD` && git push -u origin ${BRANCH}
    radd        = !ROOT=`git rev-parse --show-toplevel` && git add ${ROOT}
    root        = !ROOT=`git rev-parse --show-toplevel` && cd ${ROOT}
    rundo       = !ROOT=`git rev-parse --show-toplevel` && git undo ${ROOT}
    rdel        = "!git push origin :\"$1\" #"
    rename      = "!git branch -m \"$1\"\\/\"$2\" #"
    rls         = "!git ls-remote | grep -v \"HEAD\\|refs/heads/master\" | awk '{print $2}' | sed 's/refs\\/heads\\///'"
    squash      = rebase -i
    st          = status
    undo        = checkout --
    unstage     = reset HEAD
    wipeout     = !git unstage && git undo && git clean -fd

    # [stash]
    s   = stash
    sl  = stash list
    sft = stash show stash@{0}
    sst = stash show -p stash@{0}
    sf  = "!git stash show stash@{\"$1\"} #"
    ss  = "!git stash show -p stash@{\"$1\"} #"
    sat = stash apply stash@{0}
    sa  = "!git stash apply stash@{\"$1\"} #"
    spt = stash pop stash@{0}
    sp  = "!git stash pop stash@{\"$1\"} #"
    sdt = stash drop stash@{0}
    sd  = "!git stash drop stash@{\"$1\"} #"

    # [fuzzy]
    fcheckout       = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git checkout ${BRANCH}
    frcheckout      = !BRANCH=`git ls-remote | awk '{print $2}' | cut -d '/' -f3- | fzf --height=8 +i +m -e` && git checkout ${BRANCH}
    frdiff          = !BRANCH=`git rls $@ | sed 's/.*refs\\/heads\\///' | fzf --height=8 +i +m -e` && git diff ${BRANCH}
    fdel            = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git branch -d ${BRANCH}
    frdel           = !BRANCH=`git rls $@ | sed 's/.*refs\\/heads\\///' | fzf --height=8 +i +m -e` && git rdel ${BRANCH}
    ffdel           = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git branch -D ${BRANCH}
    fmerge          = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git merge ${BRANCH}
    fmerc           = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git merc ${BRANCH}
    frebase         = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git rebase ${BRANCH}
    flog            = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git log ${BRANCH}
    fdiff           = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git diff ${BRANCH}
    # what commits are in that branch that aren't in this one
    fcmtdiff = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git log --no-merges HEAD..${BRANCH}
    # what commits are in this branch that aren't in that one
    frcmtdiff = !BRANCH=`git ls $@ | fzf --height=8 +i +m -e` && git log --no-merges ${BRANCH}..HEAD
    # what commits are in that branch that aren't in this one
    frcmtdiff = !BRANCH=`git rls $@ | awk '{print $2}' | cut -d '/' -f3- | fzf --height=8 +i +m -e` && git log --no-merges HEAD..origin/${BRANCH}
    # what commits are in this branch that aren't in that one
    frrcmtdiff = !BRANCH=`git rls $@ | awk '{print $2}' | cut -d '/' -f3- | fzf --height=8 +i +m -e` && git log --no-merges origin/${BRANCH}..HEAD

    # [micro]
    a   = add
    br  = rename
    c   = commit
    cl  = clone
    co  = checkout
    cn  = checkout -b
    d   = diff
    f   = fetch
    fc  = fcheckout
    fd  = fdel
    fm  = fmerge
    fM  = fmerc
    fp  = push --force
    frb = frebase
    frc = frcheckout
    frd = frdel
    h   = home
    hd  = hdiff
    l   = log
    mm  = mmerge
    mr  = mrebase
    nb  = new-branch
    p   = push
    pb  = publish
    pl  = pull
    ps  = pull-sub
    ra  = radd
    rh  = "reset --hard HEAD~"
    rs  = "reset --soft HEAD~"
    rv  = revert
    und = undo
    uns = unstage
    r   = rundo
    us  = unstage

    # [submodules]
    addsub = "!git submodule add https://github.com/austinsherron/$1.git $2"
    # WARN: untested
    rmsub  =  "!git submodule deinit $1 && git rm $1"
[push]
    default = upstream
[pull]
    ff = only
[commit]
    # FIXME: this should be true, see FIXME at signingkey
    gpgsign = false
[url "https://user@hostname"]
    insteadOf = ssh://git@hostname
[url "https://x-access-token@github.com"]
    insteadOf = ssh://git@github.com
[url "https://x-access-token@127.0.0.1:54480"]
    insteadOf = ssh://git@127.0.0.1:54480
[url "https://x-access-token@some-host"]
    insteadOf = ssh://git@some-host
[url "https://x-access-token@127.0.0.1:56799"]
    insteadOf = ssh://git@127.0.0.1:56799

# slightly different configs for work (i.e.: user, branch name format, etc.)
[includeIf "gitdir:~/Workspace/workspace/granica/**"]
    path = .gitconfig-work
[includeIf "gitdir:~/.gvm/pkgsets/go1.21/global/src/project.n/"]
    path = .gitconfig-work

[gpg]
    program = gpg
[credential]
    helper = store
    helper =
    helper = /usr/local/share/gcm-core/git-credential-manager
[credential "https://dev.azure.com"]
    useHttpPath = true
