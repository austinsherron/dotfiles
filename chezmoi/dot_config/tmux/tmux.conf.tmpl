
## init ########################################################################

{{ if eq .chezmoi.os "linux" }}
# add bins to path
setenv -g PATH "${PATH}:/usr/local/bin"

# set default shell
set-option -g default-shell /bin/bash
{{ else if eq .chezmoi.os "darwin" }}
# add bins to path
setenv -g PATH "${PATH}:/opt/homebrew/bin"

# set default shell
set-option -g default-shell /opt/homebrew/bin/bash
{{- end }}

# load tmux env vars
run-shell "tmux-load-env"

## general #####################################################################

# change shortcut key binding
unbind C-b
set -g prefix `
bind ` send-prefix

# start counting windows/panes at 1, instead of 0
set -g base-index 1
setw -g pane-base-index 1

# set escape-time to 0
set -sg escape-time 0

## interactions ################################################################

# vi key bindings in copy mode
setw -g mode-keys vi

#### copy-paste

# setup 'v' to begin selection as in nvim
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "xsel --clipboard"

# update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "xsel --clipboard"

# bind p to paste selected/copied value
bind p run "pbpaste | tmux load-buffer - && tmux paste-buffer"

#### misc

# bind R to reload tmux.conf
bind M-r source-file "{{ print (env "TMUX_ROOT_PUB") "/tmux.conf" }}"

## appearance ##################################################################

#### colors

# for colors in tmux
set -g default-terminal "screen-256color"

# for colors in terminal/nvim to work, I guess...
set-option -sa terminal-features ',xterm-256color:RGB'

#### pane borders

# enable pane borders
set -g pane-border-status top
set -g pane-border-lines "heavy"

## status bar ##################################################################

# NOTE: formatting is currently handled by theme, enabled below in plugins

# enable --ugly-- status bar
set -g status on

## position

# put status bar at top of window by default
set-option -g status-position top

# shortcut for changing status bar position
bind-key s run-shell "toggle-status-bar"

# FIXME: not only is this not working, it seems that it's preventing tmux-resurrect from auto-restoring on session start
# set window names to automatically update based on the current directory
# set-option -g status-interval 5
# set-option -g automatic-rename on
# set-option -g automatic-rename-format '#{b:pane_current_path}'

## navigation ##################################################################

#### sessions

# extra binding for choose-session
bind-key S choose-session

# bindings for next/prev session
bind-key \{ switch-client -p
bind-key \} switch-client -n
bind-key -n M-, switch-client -p
bind-key -n M-. switch-client -n

#### windows

# use 'p' instead of 'l' to switch to previous window
bind-key p previous-window

# extra window switching bindings for keyboard + closer to nvim
bind-key -n M-\{ previous-window
bind-key -n M-\} next-window
# for convenience on laptop keyboards
bind-key -n M-l previous-window
bind-key -n M-\; next-window

# extra window switching bindings for keyboard + closer to nvim
bind-key -n M-! select-window -t 1
bind-key -n M-@ select-window -t 2
bind-key -n M-# select-window -t 3
bind-key -n M-$ select-window -t 4
bind-key -n M-% select-window -t 5
bind-key -n M-^ select-window -t 6
bind-key -n M-& select-window -t 7
bind-key -n M-* select-window -t 8
bind-key -n M-( select-window -t 9

#### panes

# use 'j' instead of 'q' to display pane indices for direct pane navigation
bind-key j display-panes

#### vim/tmux integration: seamless switching b/w vim windows & tmux panes

# smart pane switching with awareness of vim splits;
# see: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

## panes, windows, splits, oh my ###############################################

#### windows

## open/close

# open
bind-key -n M-n new-window
# close
bind-key -n M-z kill-window

## move

# shift left/right
bind-key -n M-S run-shell "shift-window -d l"
bind-key -n M-s run-shell "shift-window -d r"

#### panes

## open/close

# open: more intuitive shortcuts for splitting windows
bind-key - split-window -c "#{pane_current_path}"         # "vertical" split (one above, one below)
bind-key | split-window -h -c "#{pane_current_path}"      # "horizontal" split (one left, one right)
# close
bind-key -n M-X kill-pane

## misc

# hide a pane...
bind-key ! break-pane -d -n _hidden_pane
# ...and bring it back
bind-key @ join-pane -s $.0

# zoom
bind-key -n M-+ resize-pane -Z

# rename
bind-key . command-prompt -p "(rename-pane)" "select-pane -T %1"

## resizing incrementally

# resize w/ H, J, K, L
bind-key M-h resize-pane -L 2
bind-key M-l resize-pane -R 2
bind-key M-j resize-pane -D 1
bind-key M-k resize-pane -U 1
bind-key M-H resize-pane -L 10
bind-key M-L resize-pane -R 10
bind-key M-J resize-pane -D 5
bind-key M-K resize-pane -U 5

## resizing based on % of window

# v for resizing vertically
bind-key v command-prompt -p "(resize-pane vertically)" "resize-pane -y %1%%"
# h for resizing horizontally
bind-key h command-prompt -p "(resize-pane horizontally)" "resize-pane -x %1%%"

## resizing using resize-layout

# r for resizing based on configured layouts
bind-key r command-prompt -p "(resize-layout)" "run-shell \"resize-layout -l '%1'\""
# alt-r for resizing based on configured layouts
bind-key R run-shell "resize-layouts"

## hooks #######################################################################

# resize all windows when tmux client attaches and resizes
set-hook -g client-attached 'run-shell "resize-layouts"'
set-hook -g client-resized 'run-shell "resize-layouts"'
# set-hook -g window-pane-changed 'run-shell "resize-layouts"'

## plugins #####################################################################

# list of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'Morantron/tmux-fingers'     # TODO: configure
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'srcery-colors/srcery-tmux'
# NOTE: this needs to be last; see https://github.com/tmux-plugins/tmux-continuum#known-issues
set -g @plugin 'tmux-plugins/tmux-continuum'

## plugin conf #################################################################

## theme

set -g @srcery_tmux_patched_font '1'

## session persistence

set -g @resurrect-dir "{{ print (env "TMUX_ROOT_PUB") "/resurrect" }}"

# enable automatic session saving and persistence
set -g @continuum-restore 'on'
set -g @resurrect-capture-pane-contents 'on'

# enable and configure tmux auto-boot
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'fullscreen'

## plugin manager

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "{{ print (env "TMUX_ROOT_PUB") "/plugins/tpm/tpm" }}"

