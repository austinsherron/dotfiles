#!/bin/bash

## TODO: extract pieces of this file into standalone scripts, config files, etc.

## constants ###################################################################

## identifiers

# me
export readonly ME="austinsherron"
export readonly MY_NICKNAME="austin"
export readonly ME_FORMALLY="Austin Sherron"
export readonly MY_EMAIL="austin@pryvate.email"
export readonly MY_KEY_ID="D55F49224387A57E0FDB80E1494E1B61A3505B41"

# this machine
# dangerously close to $HOSTNAME...
export readonly HOST_NAME="$(hostname -s)"

## editors

export readonly EDITOR="nvim"
export readonly LEGACY_EDITOR="vim"

## git

export readonly TRUNK="master"

## important paths #############################################################

## development

export readonly DEV_ROOT="${HOME}/Workspace"
export readonly CONFIG_ROOT="${DEV_ROOT}/dotfiles"
export readonly EDITORS_ROOT="${CONFIG_ROOT}/editors"
export readonly PROJECTS_ROOT="${DEV_ROOT}/projects"
export readonly SCRATCH_ROOT="${DEV_ROOT}/scratch"
export readonly TOOLING_ROOT="${CONFIG_ROOT}/tooling"

## shell

export readonly SHELL_NAME=$(basename ${SHELL})
export readonly SHELL_ROOT="${CONFIG_ROOT}/system/shell/${SHELL_NAME}"
export readonly RC_NAME="${SHELL_NAME}rc"
export readonly RC="${HOME}/.${RC_NAME}"
export readonly RC_SRC="${SHELL_ROOT}/${RC_NAME}"
export readonly PROFILE="${HOME}/.${SHELL_NAME}_profile"

## tooling

# vim

export readonly VIM_ROOT="${EDITORS_ROOT}/vim"
export readonly VIMRC="${VIM_ROOT}/.vimrc"
export readonly VUNDLE="${VIM_ROOT}/.vim"

# nvim

export readonly NVIM_ROOT="${EDITORS_ROOT}/nvim"
export readonly NVIMRC="${NVIM_ROOT}/init.lua"
export readonly NVUNDLE="${NVIM_ROOT}/packages"

# tmux

export readonly TMUX_ROOT="${TOOLING_ROOT}/tmux"
export readonly TMUX_CONF="${TMUX_ROOT}/tmux.conf"
export readonly TMUX_BUNDLE="${TMUX_ROOT}/plugins"

## interface points

export readonly CONFIG_ROOT_PUB="${HOME}/.config"
export readonly LEGACY_CONFIG_ROOT_PUB="${HOME}"
export readonly NVIM_ROOT_PUB="${CONFIG_ROOT_PUB}/nvim"
export readonly TMUX_ROOT_PUB="${CONFIG_ROOT_PUB}/tmux"
export readonly TMUX_CONF_PUB="${CONFIG_ROOT_PUB}/tmux/tmux.conf"

## remote storage

export readonly REMOTE_ROOT="${HOME}/Remote"
export readonly DROPBOX_ROOT="${REMOTE_ROOT}/Dropbox"

## machine specific configs ####################################################

MACHINE_SPC_ROOT="${SHELL_ROOT}/machine-spc/${HOST_NAME}"

source ${MACHINE_SPC_ROOT}/machinerc

[[ -f ${MACHINE_SPC_ROOT}/appearance.sh ]] && source ${MACHINE_SPC_ROOT}/appearance.sh

## path manipulations ##########################################################

## lua

# note: as with PYTHONPATH, I'd rather not have to specify the lua path like this,
#       as it makes the scripts that rely on the path significantly less portable; at the
#       time of writing, however (03/14/2023 [pi day!]), I don't know a better solution to
#       the problem of importing homegrown modules

export LUA_PATH="${LUA_PATH};/usr/local/share/lua/5.3/?.lua"                                # lua rocks
export LUA_PATH="${LUA_PATH};${PROJECTS_ROOT}/?.lua"                                        # custom libraries
export LUA_PATH="${LUA_PATH};${PROJECTS_ROOT}/?/init.lua"                                   # custom libraries
export LUA_PATH="${LUA_PATH};${EDITORS_ROOT}/?.lua"                                         # nvim
export LUA_PATH="${LUA_PATH};${EDITORS_ROOT}/?/init.lua"                                    # nvim
export LUA_PATH="${LUA_PATH};${NVUNDLE}/?.lua"                                              # nvim plugins
export LUA_PATH="${LUA_PATH};${NVUNDLE}/?/init.lua"                                         # nvim plugins
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/?.lua"                                  # xplr 
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/?/init.lua"                             # xplr 
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/xplr/packages/?.lua"                    # xplr plugins
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/xplr/packages/?/init.lua"               # xplr plugins
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/xplr/packages/xpm.xplr/?.lua"           # xplr plugins
export LUA_PATH="${LUA_PATH};${NVUNDLE}/nvim-treesitter/lua/?.lua"                          # treesitter
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/xplr/packages/xpm.xplr/?/init.lua"      # xplr plugins manager

## shell #######################################################################

## behavior

# don't try to tab-complete hidden files
bind 'set match-hidden-files off'

# append to + reload history = history shared b/w tmux panes, amongst other things
export PROMPT_COMMAND="history -a; history -n"

## appearance

[[ -f ${SHELL_ROOT}/core/colors.sh ]] && source ${SHELL_ROOT}/core/colors.sh

## tmux ########################################################################

# auto start tmux when shell starts
# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#     exec tmux
# fi

## aliases #####################################################################

## rename

alias g="z"
alias og-vim="vim"
alias nv="nvim"       
alias rm="trash-cli"
alias ss="s-search"    
alias tk="task"
alias tx="tmux"
alias vim="nvim"
alias zx="zoxide"

## navigation

alias cst="cd ${HOME}/Customization"
alias desk="cd ${HOME}/Desktop"
alias docs="cd ${HOME}/Documents"
alias dots="cd ${CONFIG_ROOT}"
alias down="cd ${HOME}/Downloads"
alias drop="cd ${DROPBOX_ROOT}"
alias pics="cd ${HOME}/Pictures"
alias proj="cd ${PROJECTS_ROOT}"
alias scr="cd ${SCRATCH_ROOT}"
alias vid="cd ${VIDEOS}"
alias vol="cd ${VOLUME_ROOT}"
alias wk="cd ${DEV_ROOT}"

## config

# reload
alias rcload="source ${RC}"
alias txload="tmux source-file ${TMUX_CONF_PUB}"

# shell + tmux
alias rc="${EDITOR} ${RC}; rcload"
alias tmuxconf="${EDITOR} ${TMUX_CONF} ; txload "
alias tmuxroot="cd ${TMUX_ROOT}"
alias tmuxrootpub="cd ${TMUX_ROOT_PUB}"

# nvim
alias nvimrc="${EDITOR} ${NVIM_ROOT_PUB}/init.lua"
alias nvrc="nvimrc"
alias nvrt="cd ${NVIM_ROOT}"
alias nvrtpub="cd ${NVIM_ROOT_PUB}"
alias nvundle="cd ${NVUNDLE}"

# vim
alias vimrc="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.vimrc"
alias vundle="cd ${LEGACY_CONFIG_ROOT_PUB}/.vim"

# misc (task, git, hyper, kube)
alias tkrc="${EDITOR} ${CONFIG_ROOT_PUB}/task/taskrc"
alias gitconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.gitconfig"
alias hyperconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.hyper.js"
alias kubeconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.kube/config"

## utils

# diff
alias diff="colordiff -N -u"
alias diffr="diff -r"
alias diffw="diff -w"

# copy/paste
alias pbc="pbcopy"
alias pbp="pbpaste"

## github ######################################################################

## gh cli alises

# for prs 
alias pr-ls="gh pr ls --author \"@me\""
alias pr-view="gh pr view ${1}"
alias pr-todo="gh pr ls --search 'is:open is:pr review-requested:austinsherron archived:false'"

# for repos 
alias repo-ls="gh repo ls --no-archived"

## functions ###################################################################

## navigation

dir-switch() {
    cd $(switch $@)
}

dir-switch-1() {
    cd $(switch ${1} -m 1)
}

dir-switch-n() {
    cd $(switch ${1} -m ${2})
}

alias ds="dir-switch"
alias dso="dir-switch-1"
alias dsn="dir-switch-n"

## files

scratch() {
    echo "${SCRATCH_ROOT}/${1}"
}

unhide() {
  GLOBIGNORE=".:.."
  for file in .*; do
     mv -n "$file" "${file#.}"
  done
}

diff-clip() {
    tmp=`mktemp`    
    pbpaste >| $tmp
    diff $tmp $1 && rm $tmp
}

mv-to-bak() {
    mv ${1} ${1}.bak
}

mv-from-bak() {
    mv ${1} ${1%.bak}
}

## clipboard

pbpf() {
    pbpaste > $1
}

pbpo() {
    pbpaste > $1 && ${EDITOR} $1
}

pbcf() {
    cat $1 | pbcopy
}

clip-clear() {
    pbc < /dev/null
}

## git

alias get-git-root="git rev-parse --show-toplevel"

git-root() {
    cd `get-git-root`
}

git-ignore() {
    ${EDITOR} `get-git-root`/.gitignore
}

git-sync() {
    branch="$(git rev-parse --abbrev-ref HEAD)"

    if [[ "${branch}" = "${TRUNK}" ]]; then
        echo "Branch is alrady on ${TRUNK}"
        exit 1
    fi

    git home
    git pull
    git checkout "${branch}"
    git mmerge

    if [[ "${1}" = "-p" ]]; then
        git push
    fi
}

## gpg

gpg-export() {
    mkdir gpg-keychain
    cd gpg-keychain

    gpg --armor --export-secret-keys > priv.asc
    gpg --armor --export > pub.asc
    gpg --armor --export-ownertrust > trust.asc

    if [[ "${1}" != "-c" ]]; then
        return
    fi

    cp ~/.gnupg/dirmngr.conf .
    cp ~/.gnupg/gpg-agent.conf .
    cp ~/.gnupg/gpg.conf .
    cd -
}

## plugins/extensions ##########################################################

## TODO: why isn't this working (on macbook, at least)?
## fzf tab completion

# source ${EXT_ROOT}/fzf-tab-completion/bash/fzf-bash-completion.sh
# bind -x '"\t": fzf_bash_completion'

## oh-my-bash

source ${SHELL_ROOT}/extensions/oh-my-bash.sh

## starship

source ${SHELL_ROOT}/extensions/starship.sh

## zoxide

eval "$(zoxide init bash)"
