## TODO: extract pieces of this file into standalone scripts, config files, etc.

## constants ###################################################################

export readonly ME="austinsherron"
export readonly MY_NICKNAME="austin"
export readonly MACHINE="StarBook"
export readonly MACHINE_NICKNAME="⭐📖"
# dangerously close to colliding w/ $HOSTNAME
export readonly HOST_NAME="$(hostname -s)"  

export readonly EDITOR="nvim"
export readonly LEGACY_EDITOR="vim"

## important paths #############################################################

## development

export readonly DEV_ROOT="${HOME}/Workspace"
export readonly CONFIG_ROOT="${DEV_ROOT}/dotfiles"
export readonly EDITORS_ROOT="${CONFIG_ROOT}/editors"
export readonly PROJECTS_ROOT="${DEV_ROOT}/projects"
export readonly SCRATCH_ROOT="${DEV_ROOT}/scratch"

## shell

export readonly SHELL_NAME=$(basename ${SHELL})
export readonly SHELL_ROOT="${CONFIG_ROOT}/system/shell/${SHELL_NAME}"
export readonly RC_NAME="${SHELL_NAME}rc"
export readonly RC="${HOME}/.${RC_NAME}"
export readonly RC_SRC="${SHELL_ROOT}/${RC_NAME}"
export readonly PROFILE="${HOME}/.${SHELL_NAME}_profile"

## tooling

# vim

export readonly VIM_ROOT="${EDITORS_ROOT}/vim"
export readonly VIMRC="${VIM_ROOT}/.vimrc"
export readonly VUNDLE="${VIM_ROOT}/.vim"

# nvim

export readonly NVIM_ROOT="${EDITORS_ROOT}/nvim"
export readonly NVIMRC="${NVIM_ROOT}/init.lua"
export readonly NVUNDLE="${NVIM_ROOT}/packages"

# tmux

export readonly TMUX_ROOT="${CONFIG_ROOT}/tooling/tmux"
export readonly TMUX_CONF="${TMUX_ROOT}/tmux.conf"
export readonly TMUX_BUNDLE="${TMUX_ROOT}/plugins"

## interface points

export readonly CONFIG_ROOT_PUB="${HOME}/.config"
export readonly LEGACY_CONFIG_ROOT_PUB="${HOME}"
export readonly NVIM_ROOT_PUB="${CONFIG_ROOT_PUB}/nvim"
export readonly TMUX_ROOT_PUB="${CONFIG_ROOT_PUB}/tmux"
export readonly TMUX_CONF_PUB="${CONFIG_ROOT_PUB}/tmux/tmux.conf"

## remote storage

export readonly REMOTE_ROOT="${HOME}/Remote"
export readonly DROPBOX_ROOT="${REMOTE_ROOT}/Dropbox"

## external storage

export readonly VOLUME_ROOT="/media"
export readonly MOUNT_POINT="${VOLUME_ROOT}/${USER}"

## machine specific configs ####################################################

source ${SHELL_ROOT}/machine-spc/${HOST_NAME}

## path manipulations ##########################################################

## lua

# note: as with PYTHONPATH, I'd rather not have to specify the lua path like this,
#       as it makes the scripts that rely on the path significantly less portable; at the
#       time of writing, however (03/14/2023 [pi day!]), I don't know a better solution to
#       the problem of importing homegrown modules

export LUA_PATH="${LUA_PATH};/usr/local/share/lua/5.3/?.lua"            # lua rocks
export LUA_PATH="${LUA_PATH};${PROJECTS_ROOT}/?.lua"                    # custom libraries
export LUA_PATH="${LUA_PATH};${EDITORS_ROOT}/?.lua"                     # nvim
export LUA_PATH="${LUA_PATH};${NVUNDLE}/?.lua"                          # nvim plugins
export LUA_PATH="${LUA_PATH};${NVUNDLE}/nvim-treesitter/lua/?.lua"      # treesitter

## shell #######################################################################

## behavior

# don't try to tab-complete hidden files
bind 'set match-hidden-files off'

# append to + reload history = history shared b/w tmux panes, amongst other things
export PROMPT_COMMAND="history -a; history -n"

## appearance

[[ -f ${SHELL_ROOT}/core/colors.sh ]] && source ${SHELL_ROOT}/core/colors.sh

## tmux ########################################################################

# auto start tmux when shell starts
# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#     exec tmux
# fi

## aliases #####################################################################

## rename

alias og-vim="vim"
alias nv="nvim"       
alias ss="s-search"    
alias tx="tmux"
alias vim="nvim"

## navigation

alias cst="cd ${HOME}/Customization"
alias desk="cd ${HOME}/Desktop"
alias docs="cd ${HOME}/Documents"
alias dots="cd ${CONFIG_ROOT}"
alias down="cd ${HOME}/Downloads"
alias drop="cd ${DROPBOX_ROOT}"
alias pics="cd ${HOME}/Pictures"
alias proj="cd ${PROJECTS_ROOT}"
alias scr="cd ${SCRATCH_ROOT}"
alias vid="cd ${HOME}/Videos"
alias vol="cd ${VOLUME_ROOT}"
alias wk="cd ${DEV_ROOT}"

## config

# reload
alias loadrc="source ${RC}"
alias loadtmuxconf="tmux source-file ${TMUX_CONF_PUB}"

# shell + tmux
alias rc="${EDITOR} ${RC}; loadrc"
alias tmuxconf="${EDITOR} ${TMUX_CONF} ; loadtmuxconf "
alias tmuxroot="cd ${TMUX_ROOT}"
alias tmuxrootpub="cd ${TMUX_ROOT_PUB}"

# nvim
alias nvimrc="${EDITOR} ${NVIM_ROOT_PUB}/init.lua"
alias nvrc="nvimrc"
alias nvroot="cd ${NVIM_ROOT}"
alias nvrootpub="cd ${NVIM_ROOT_PUB}"
alias nvundle="cd ${NVUNDLE}"

# vim
alias vimrc="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.vimrc"
alias vundle="cd ${LEGACY_CONFIG_ROOT_PUB}/.vim"

# misc (git, hyper, kube)
alias gitconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.gitconfig"
alias hyperconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.hyper.js"
alias kubeconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.kube/config"

## utils

# diff
alias diff="colordiff -N -u"
alias diffr="diff -r"
alias diffw="diff -w"

# copy/paste
alias pbc="pbcopy"
alias pbp="pbpaste"

## github ######################################################################

## gh cli alises

# for prs 
alias pr-ls="gh pr ls --author \"@me\""
alias pr-view="gh pr view ${1}"
alias pr-todo="gh pr ls --search 'is:open is:pr review-requested:austinsherron archived:false'"

# for repos 
alias repo-ls="gh repo ls --no-archived"

## functions ###################################################################

## files

scratch() {
    echo "${SCRATCH_ROOT}/${1}"
}

unhide() {
  GLOBIGNORE=".:.."
  for file in .*; do
     mv -n "$file" "${file#.}"
  done
}

diff-clip() {
    tmp=`mktemp`    
    pbpaste >| $tmp
    diff $tmp $1 && rm $tmp
}

## clipboard

pbpf() {
    pbpaste > $1
}

pbpo() {
    pbpaste > $1 && ${EDITOR} $1
}

pbcf() {
    cat $1 | pbcopy
}

## git

alias get-git-root="git rev-parse --show-toplevel"

git-root() {
    cd `get-git-root`
}

git-ignore() {
    ${EDITOR} `get-git-root`/.gitignore
}

## mounts/veracrypt

VC_MOUNT_POINT="${VOLUME_ROOT}/veracrypt"

alias veracrypt="veracrypt --text"

vc-mount() {
    veracrypt --mount "${1}" --mount "${2}" --pim "${3}" --keyfiles "" --protect-hidden no --verbose
}

vc-dismount() {
    veracrypt --dismount "${1}"
}

vc-dismount-all() {
    vc-dismount
}

## known volumes

vc-mount-vlt() {
    vc-mount "${MOUNT_POINT}/DukeOfMoles/Encrypted" "${VC_MOUNT_POINT}1/" "0"
#     vc-mount "${DROPBOX_ROOT}/Storage/DukeOfMoles-Encrypted" "${VC_MOUNT_POINT}1/" "0"
}
 
vc-dismount-vlt() {
    vc-dismount "${VC_MOUNT_POINT}1" 
}

vc-mount-bkup() {
    vc-mount "${MOUNT_POINT}/VcntOfVoles/Encrypted" "${VC_MOUNT_POINT}2/" "0"
}

vc-dismount-bkup() {
    vc-dismount "${VC_MOUNT_POINT}2" 
}

vc-mount-dp-frz() {
#     vc-mount "${MOUNT_POINT}/DaneOfDucks/Encrypted" "${VC_MOUNT_POINT}3/" "0"
    vc-mount "${DROPBOX_ROOT}/Storage/DaneOfDucks-Encrypted" "${VC_MOUNT_POINT}1/" "0"
}

vc-dismount-dp-frz() {
    vc-dismount "${VC_MOUNT_POINT}3" 
}

vc-mount-keys() {
    vc-mount "${MOUNT_POINT}/BreakGlass/Encrypted" "${VC_MOUNT_POINT}4/" "0"
}

vc-dismount-keys() {
    vc-dismount "${VC_MOUNT_POINT}4" 
}

### encrypted volumes

init-vlt() {
    vc-mount-vlt
}

term-vlt() {
    vc-dismount-vlt
    sudo eject "${MOUNT_POINT}/DukeOfMoles"
}
 
init-bkup() {
    vc-mount-bkup
}

term-bkup() {
    vc-dismount-bkup
    sudo eject "${MOUNT_POINT}/VcntOfVoles"
}

init-dp-frz() {
    vc-mount-dp-frz
}

term-dp-frz() {
    vc-dismount-dp-frz
    sudo eject "${MOUNT_POINT}/DaneOfDucks"
}

init-keys() {
    vc-mount-keys
}

term-keys() {
    vc-dismount-keys
    sudo eject "${MOUNT_POINT}/BreakGlass"
}

init-all() {
    fix-veracrypt
    vc-mount-vlt
    vc-mount-bkup
    vc-mount-dp-frz
    vc-mount-keys
}

term-all() {
    vc-dismount-all
    sudo eject "${MOUNT_POINT}/DukeOfMoles"
    sudo eject "${MOUNT_POINT}/DaneOfDucks"
    sudo eject "${MOUNT_POINT}/VcntOfVoles"
    sudo eject "${MOUNT_POINT}/BreakGlass"
}

## keepassxc

open-kp-vlt() {
    kpdb=`find "${VC_MOUNT_POINT}" -path "${DROPBOX_ROOT}" -not -path "*/.*" -not -path "*/*-Locked.kdbx" -type f -name "*.kdbx" | fzf +i --height=1%`
    xdg-open ${kpdb}
}

# open-vlt() {
#     keepassxc open /home/the.vole.viscount/Documents/Security/Passwords.kdbx -y 2
# }
# 
# open-vlt-gui() {
#     open /Volumes/Vault/Secrets/Passwords.kdbx -a /Applications/KeePassXC.app
# }
# 
# get-pw() {
#     keepassxc clip /Volumes/Vault/Secrets/Passwords.kdbx "${1}" "${2}" -b -y 2    
# }

## gpg

gpg-export() {
    mkdir gpg-keychain
    cd gpg-keychain

    gpg --armor --export-secret-keys > priv.asc
    gpg --armor --export > pub.asc
    gpg --armor --export-ownertrust > trust.asc

    if [[ "${1}" != "-c" ]]; then
        return
    fi

    cp ~/.gnupg/dirmngr.conf .
    cp ~/.gnupg/gpg-agent.conf .
    cp ~/.gnupg/gpg.conf .
    cd -
}

## 2-fa 

2-fa() {
    pbpaste | gpg -d | grep "${1}" | cut -d ':' -f2 | xargs | pbcopy 
}

ab-2fa() {
    2-fa "Your AlphaBay 2-FA Code: " 
}

bh-2fa() {
    2-fa "Your authorization code is: "
}

ic-2fa() {
    2-fa "Incognito Verification Token: "
}

## crypto

as-qr() {
   qrencode -o qr.png "$1:$2?amount=$3" 
}

monero-qr() {
    as-qr "monero" $1 $2
    open qr.png
}

bitcoin-qr() {
    as-qr "bitcoin" $1 $2
    open qr.png
}

alias xmr-qr="monero-qr"
alias btc-qr="bitcoin-qr"

## plugins/extensions ##########################################################

## fzf tab completion

# source ${EXT_ROOT}/fzf-tab-completion/bash/fzf-bash-completion.sh
# bind -x '"\t": fzf_bash_completion'

## oh-my-bash

source ${SHELL_ROOT}/extensions/oh-my-bash.sh

