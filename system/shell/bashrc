## TODO: extract pieces of this file into standalone scripts, config files, etc.

## constants ###################################################################

export readonly ME="austinsherron"
export readonly MY_NICKNAME="austin"
export readonly MACHINE="StarBook"
export readonly MACHINE_NICKNAME="⭐📖"

export readonly EDITOR="nvim"
export readonly LEGACY_EDITOR="vim"

## shell #######################################################################

## behavior

bind 'set match-hidden-files off'

## tmux ########################################################################

## auto start tmux when shell starts

# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#   exec tmux
# fi

## important paths #############################################################

## shell

export readonly SHELL_NAME=`filename ${SHELL}`
export readonly RC="${HOME}/.${SHELL_NAME}rc"
export readonly PROFILE="${HOME}/.${SHELL_NAME}_profile"

## development

export readonly DEV_ROOT="${HOME}/Workspace"
export readonly CONFIG_ROOT="${DEV_ROOT}/dotfiles"
export readonly EDITORS_ROOT="${CONFIG_ROOT}/editors"
export readonly PROJECTS_ROOT="${DEV_ROOT}/projects"

## tooling

# vim

export VIM_ROOT="${EDITORS_ROOT}/vim"
export VIMRC="${VIM_ROOT}/.vimrc"
export VUNDLE="${VIM_ROOT}/.vim"

# nvim

export NVIM_ROOT="${EDITORS_ROOT}/nvim"
export NVIMRC="${NVIM_ROOT}/init.lua"
export NVUNDLE="${NVIM_ROOT}/packages"

# tmux

export TMUX_ROOT="${CONFIG_ROOT}/tooling/tmux"
export TMUX_CONF="${TMUX_ROOT}/tmux.conf"
export TMUX_BUNDLE="${TMUX_ROOT}/plugins"

## interface points

export CONFIG_ROOT_PUB="${HOME}/.config"
export LEGACY_CONFIG_ROOT_PUB="${HOME}"
export NVIM_ROOT_PUB="${CONFIG_ROOT_PUB}/nvim"
export TMUX_ROOT_PUB="${CONFIG_ROOT_PUB}/tmux"
export TMUX_CONF_PUB="${CONFIG_ROOT_PUB}/tmux/tmux.conf"

## path manipulations ##########################################################

## lua

# note: as with PYTHONPATH, I'd rather not have to specify the lua path like this,
#       as it makes the scripts that rely on the path significantly less portable; at the
#       time of writing, however (03/14/2023 [pi day!]), I don't know a better solution to
#       the problem of importing homegrown modules

export LUA_PATH="${LUA_PATH};/usr/local/share/lua/5.3/?.lua"
export LUA_PATH="${LUA_PATH};${PROJECTS_ROOT}/?.lua" 
export LUA_PATH="${LUA_PATH};${EDITORS_ROOT}/?.lua" 
export LUA_PATH="${LUA_PATH};${NVUNDLE}/?.lua" 
export LUA_PATH="${LUA_PATH};${NVUNDLE}/nvim-treesitter/lua/?.lua" 

## aliases #####################################################################

## rename

alias vim="nvim"
alias og-vim="vim"

## navigation
alias cst="cd ${HOME}/Customization"
alias desk="cd ${HOME}/Desktop"
alias docs="cd ${HOME}/Documents"
alias dots="cd ${CONFIG_ROOT}"
alias down="cd ${HOME}/Downloads"
alias drop="cd ${HOME}/Remote/Dropbox"
alias pics="cd ${HOME}/Pictures"
alias proj="cd ${PROJECTS_ROOT}"
alias vid="cd ${HOME}/Videos"
alias vol="cd /media/"
alias wk="cd ${DEV_ROOT}"

## config
alias loadrc="source ${RC}"
alias loadtmuxconf="tmux source-file ${TMUX_CONF_PUB}"
alias rc="${EDITOR} ${RC}; loadrc"
alias tmuxconf="${EDITOR} ${TMUX_CONF} ; loadtmuxconf "
alias tmuxroot="cd ${TMUX_ROOT}"
alias tmuxrootpub="cd ${TMUX_ROOT_PUB}"
alias nvimrc="${EDITOR} ${NVIM_ROOT_PUB}/init.lua"
alias nvrc="nvimrc"
alias nvroot="cd ${NVIM_ROOT}"
alias nvrootpub="cd ${NVIM_ROOT_PUB}"
alias nvundle="cd ${NVUNDLE}"
alias vimrc="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.vimrc"
alias vundle="cd ${LEGACY_CONFIG_ROOT_PUB}/.vim"
alias gitconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.gitconfig"
alias hyperconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.hyper.js"
alias kubeconf="${EDITOR} ${LEGACY_CONFIG_ROOT_PUB}/.kube/config"

## utils
alias diff="colordiff -N -u"
alias pbcopy='xsel --clipboard'
alias pbpaste='xsel --clipboard'
alias pbc="pbcopy"
alias pbp="pbpaste"
alias open="xdg-open"
alias dbc="dbxcli"
alias dp2="devilspie2"  # todo
alias tx="tmux"
alias ss="s-search"     # todo
alias nv="nvim"         # todo

## github ######################################################################

alias pr-list="gh pr ls --author \"@me\""
alias pr-view="gh pr view ${1}"
alias pr-cmts="gh pr view ${1} --comments"

## functions ###################################################################

## config

init-links() {
    ln -s -f ${NVIM_ROOT} ${CONFIG_HOME}
    ln -s -f ${TMUX_ROOT} ${CONFIG_HOME}
}

## utils

pbpo() {
    pbpaste > $1
    nvim $1
}

pbcf() {
    cat $1 | pbcopy
}

unhide() {
  GLOBIGNORE=".:.."
  for file in .*; do
     mv -n "$file" "${file#.}"
  done
}

diff-clip() {
    tmp=`mktemp`    
    pbpaste >| $tmp
    diff $tmp $1 && rm $tmp

}

## git

alias get-git-root="git rev-parse --show-toplevel"

git-root() {
    cd `get-git-root`
}


git-ignore() {
    ${EDITOR} `get-git-root`/.gitignore
}


## navigation

switch() {
    repo="$(ls ${PROJECTS_ROOT} | fzf +i +m -e --height=1%)"
    cd ${PROJECTS_ROOT}/${repo}
}

## mounts/veracrypt

MOUNT_POINT="/media/the.vole.viscount"
VC_MOUNT_POINT="/media/veracrypt"

alias veracrypt="veracrypt --text"

vc-mount() {
    veracrypt --mount "${1}" --mount "${2}" --pim "${3}" --keyfiles "" --protect-hidden no --verbose
}

vc-dismount() {
    veracrypt --dismount "${1}"
}

vc-dismount-all() {
    vc-dismount
}

### known volumes

vc-mount-vlt() {
    vc-mount "${MOUNT_POINT}/DukeOfMoles/Encrypted" "/media/veracrypt1/" "0"
#     vc-mount "/home/the.vole.viscount/Dropbox/Storage/DukeOfMoles-Encrypted" "/media/veracrypt1/" "0"
}
 
vc-dismount-vlt() {
    vc-dismount "/media/veracrypt1" 
}

vc-mount-bkup() {
    vc-mount "${MOUNT_POINT}/VcntOfVoles/Encrypted" "/media/veracrypt2/" "0"
}

vc-dismount-bkup() {
    vc-dismount "/media/veracrypt2" 
}

vc-mount-dp-frz() {
#     vc-mount "${MOUNT_POINT}/DaneOfDucks/Encrypted" "/media/veracrypt3/" "0"
    vc-mount "/home/the.vole.viscount/Dropbox/Storage/DaneOfDucks-Encrypted" "/media/veracrypt1/" "0"
}

vc-dismount-dp-frz() {
    vc-dismount "/media/veracrypt3" 
}

vc-mount-keys() {
    vc-mount "${MOUNT_POINT}/BreakGlass/Encrypted" "/media/veracrypt4/" "0"
}

vc-dismount-keys() {
    vc-dismount "/media/veracrypt4" 
}

### encrypted volumes

init-vlt() {
    vc-mount-vlt
}

term-vlt() {
    vc-dismount-vlt
    sudo eject "${MOUNT_POINT}/DukeOfMoles"
}
 
init-bkup() {
    vc-mount-bkup
}

term-bkup() {
    vc-dismount-bkup
    sudo eject "${MOUNT_POINT}/VcntOfVoles"
}

init-dp-frz() {
    vc-mount-dp-frz
}

term-dp-frz() {
    vc-dismount-dp-frz
    sudo eject "${MOUNT_POINT}/DaneOfDucks"
}

init-keys() {
    vc-mount-keys
}

term-keys() {
    vc-dismount-keys
    sudo eject "${MOUNT_POINT}/BreakGlass"
}

init-all() {
    fix-veracrypt
    vc-mount-vlt
    vc-mount-bkup
    vc-mount-dp-frz
    vc-mount-keys
}

term-all() {
    vc-dismount-all
    sudo eject "${MOUNT_POINT}/DukeOfMoles"
    sudo eject "${MOUNT_POINT}/DaneOfDucks"
    sudo eject "${MOUNT_POINT}/VcntOfVoles"
    sudo eject "${MOUNT_POINT}/BreakGlass"
}

## keepassxc

open-kp-vlt() {
    kpdb=`find /media/ ${HOME} -not -path "${HOME}/Dropbox*" -not -path "*/.*" -not -path "*/*-Locked.kdbx" -type f -name "*.kdbx" | fzf +i --height=1%`
    xdg-open ${kpdb}
}

# open-vlt() {
#     keepassxc open /home/the.vole.viscount/Documents/Security/Passwords.kdbx -y 2
# }
# 
# open-vlt-gui() {
#     open /Volumes/Vault/Secrets/Passwords.kdbx -a /Applications/KeePassXC.app
# }
# 
# get-pw() {
#     keepassxc clip /Volumes/Vault/Secrets/Passwords.kdbx "${1}" "${2}" -b -y 2    
# }

## gpg

gpg-export() {
    mkdir gpg-keychain
    cd gpg-keychain

    gpg --armor --export-secret-keys > priv.asc
    gpg --armor --export > pub.asc
    gpg --armor --export-ownertrust > trust.asc

    if [[ "${1}" != "-c" ]]; then
        return
    fi

    cp ~/.gnupg/dirmngr.conf .
    cp ~/.gnupg/gpg-agent.conf .
    cp ~/.gnupg/gpg.conf .
    cd -
}

## 2-fa 

2-fa() {
    pbpaste | gpg -d | grep "${1}" | cut -d ':' -f2 | xargs | pbcopy 
}

ab-2fa() {
    2-fa "Your AlphaBay 2-FA Code: " 
}

bh-2fa() {
    2-fa "Your authorization code is: "
}

ic-2fa() {
    2-fa "Incognito Verification Token: "
}

## crypto

as-qr() {
   qrencode -o qr.png "$1:$2?amount=$3" 
}

monero-qr() {
    as-qr "monero" $1 $2
    open qr.png
}

bitcoin-qr() {
    as-qr "bitcoin" $1 $2
    open qr.png
}

## oh my bash ##################################################################

# Path to your oh-my-bash installation.
export OSH="/home/the.vole.viscount/.oh-my-bash"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-bash is loaded.
# OSH_THEME="agnoster"
OSH_THEME="powerline"
# OSH_THEME="rr"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_OSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $OSH/custom?
# OSH_CUSTOM=/path/to/new-custom-folder

# Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
# Custom completions may be added to ~/.oh-my-bash/custom/completions/
# Example format: completions=(ssh git bundler gem pip pip3)
# Add wisely, as too many completions slow down shell startup.
completions=(
  git
  composer
  ssh
  kubectl
  go
  awscli
  terraform
  tmux
)

# Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
# Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
# Example format: aliases=(vagrant composer git-avh)
# Add wisely, as too many aliases slow down shell startup.
aliases=(
  general
)

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  # bashmarks
  # kubectl
)

source $OSH/oh-my-bash.sh

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-bash libs,
# plugins, and themes. Aliases can be placed here, though oh-my-bash
# users are encouraged to define aliases within the OSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias bashconfig="mate ~/.bashrc"
# alias ohmybash="mate ~/.oh-my-bash"

POWERLINE_PROMPT="user_info scm python_venv ruby cwd"


