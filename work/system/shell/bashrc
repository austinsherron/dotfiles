## TODO: extract pieces of this file into standalone scripts, config files, etc.

## constants ###################################################################

export readonly ME="austinsherron"
export readonly MY_NICKNAME="austin"
export readonly MACHINE="MacBook"
export readonly MACHINE_NICKNAME="🍎📖"

export readonly EDITOR="nvim"
export readonly LEGACY_EDITOR="vim"

## shell #######################################################################

## behavior

bind 'set match-hidden-files off'

## tmux ########################################################################

# auto start tmux when shell starts

# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#     exec tmux
# fi

## important paths #############################################################

## shell

export readonly SHELL_NAME=`basename ${SHELL}`             ## diff
export readonly RC="${HOME}/.${SHELL_NAME}rc"
export readonly PROFILE="${HOME}/.${SHELL_NAME}_profile"

## development

export readonly SIGMA_ROOT="${HOME}/sigma"                 ## diff
export readonly DEV_ROOT="${HOME}/Workspace"
export readonly CONFIG_ROOT="${DEV_ROOT}/dotfiles"
export readonly EDITORS_ROOT="${CONFIG_ROOT}/editors"
export readonly PROJECTS_ROOT="${DEV_ROOT}/projects"

## tooling

# vim

export VIM_ROOT="${EDITORS_ROOT}/vim"
export VIMRC="${VIM_ROOT}/.vimrc"
export VUNDLE="${VIM_ROOT}/.vim"

# nvim

export NVIM_ROOT="${EDITORS_ROOT}/nvim"
export NVIMRC="${NVIM_ROOT}/init.lua"
export NVUNDLE="${NVIM_ROOT}/packages"

# tmux

export TMUX_ROOT="${CONFIG_ROOT}/tooling/tmux"
export TMUX_CONF="${TMUX_ROOT}/tmux.conf"
export TMUX_BUNDLE="${TMUX_ROOT}/plugins"

## interface points

export CONFIG_ROOT_PUB="${HOME}/.config"
export LEGACY_CONFIG_ROOT_PUB="${HOME}"
export NVIM_ROOT_PUB="${CONFIG_ROOT_PUB}/nvim"
export TMUX_ROOT_PUB="${CONFIG_ROOT_PUB}/tmux"
export TMUX_CONF_PUB="${CONFIG_ROOT_PUB}/tmux/tmux.conf"

## path manipulations ##########################################################

## shell path

export PATH="$PATH:$HOME/.jenv/bin:${HOME}/go/bin"
export PATH="${HOME}/Library/Python/3.7/lib/python/site-packages:$PATH"
export PATH="${HOME}/Documents/scripts/bin/git:$PATH"
export PATH="${HOME}/.sigma/scripts:$PATH"
export PATH="${HOME}/.local/bin:$PATH"
export PATH="${HOME}/go/bin:$PATH"

## lua path

export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/editors/nvim/?.lua"
export LUA_PATH="${LUA_PATH};${CONFIG_ROOT}/tooling/xplr/?.lua"

## sigma service config ########################################################

source "$HOME/.sigmarc"
source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc"
source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"

## git #########################################################################

## prompt (commented out by Austin on 05/01/2021 since oh my bash was installed)

source ~/.git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1='$(__git_ps1 "\n(%s)")\n\W [\!] $ '

## cli autocompletion

source ~/.git-completion.bash

## gh pr cli aliases

alias pr-list="gh pr ls --author \"@me\""
alias pr-view="gh pr view ${1}"
alias pr-create="gh pr create -a \"@me\" -r \"sigmacomputing/infra\""
alias pr-todo="gh pr ls --search 'is:open is:pr review-requested:austinsherron archived:false'"

## plugins/extensions ##########################################################

# fzf tab completion
# source ${EXT_ROOT}/fzf-tab-completion/bash/fzf-bash-completion.sh
# bind -x '"\t": fzf_bash_completion'

## kube* #######################################################################

## aliases
alias kubectl="kubecolor"
alias kc="kubecolor"
alias kae="kubeapply expand --clean"
alias kad="kubeapply diff"
alias kaa="kubeapply apply"
alias sga="sig-auth"
alias ska="sig-kubeapply"
alias diff="colordiff"

## for kubectl autocompletion

source <(kubectl completion bash)
complete -F __start_kubectl kc

## python ######################################################################

eval "$(pyenv init -)"

## aliases #####################################################################

## navigation
alias desk="cd ~/Desktop/"
alias docs="cd ~/Documents/"
alias down="cd ~/Downloads/"
alias drop="cd ~/Dropbox/"
alias pics="cd ~/Pictures/"
alias vids="cd ~/Movies/"
alias vol="cd /Volumes/"
alias wk="cd ~/Workspace"
## renames
alias lsblk="diskutil list"
alias eject="sudo diskutil eject"
alias pip="pip3"
alias python="python3"
alias spt="spotify"
## conf
alias loadrc="source ~/.bashrc"
alias loadtmuxconf="tmux source ~/.tmux.conf"
alias rc="nvim ~/.bashrc ; loadrc"
alias tmuxconf="nvim ~/.tmux.conf ; loadtmuxconf"
alias vimrc="nvim ~/.vimrc"
alias nvimrc="nvim ~/.config/nvim/init.lua"
alias og-vim="vim"
alias vundle="cd ~/.vim/bundle"
alias nvundle="cd ~/.config/nvim/"
alias gitconf="nvim ~/.gitconfig"
alias kubeconf="nvim ~/.kube/config"
## generic util
alias uz="unzip"
alias mvzip="mv ~/Downloads/*.zip ~/Downloads/tmp/unzip/"
## sigma util
alias build-ka="cd ~/sigma/mono-go/kubeapply && make install && cd -" 
alias oracle="curl \"https://resolv.sigmacomputing.com/api/v1/organizations/$1/$2\""
alias get-sec="kc get secret $1 -o yaml > ~/Downloads/secrets/yaml/$1.yaml"
alias kcpa="kc get po -l app="
alias sig="cd ~/sigma"
alias oc-jrnl="nvim /Users/austinsherron/sigma/infra-oncall/journal/03062023-03132023.md"
## k8s syntactic sugar
alias get-tls-crt=""
## tmux
alias in-popup="tmux display-popup"

# constants ####################################################################

EKS_CALIBAN="\"32525:D93884AFB253EE3FD99F9F42C5197501.yl4.us-west-2.eks.amazonaws.com:443\""
EKS_PORTIA="\"32525:D93884AFB253EE3FD99F9F42C5197501.yl4.us-west-2.eks.amazonaws.com:443\""

export KUBEAPPLY_DIFF_IGNORES="/Users/austinsherron/sigma/mono-go/kubeapply/conf/diff_ignores"
export CLOUDSDK_PYTHON="/Users/austinsherron/.pyenv/shims/python3"
export KUBE_EDITOR="nvim"
export EDITOR="nvim"
export KUBECONFIG="/Users/austinsherron/.kube/config"

## functions ###################################################################

## git

git-root() {
    ROOT=`git rev-parse --show-toplevel`
    cd "${ROOT}"
}

## clipboard

pbp() {
    pbpaste > $1
}

pbpo() {
    pbpaste > $1 && vim $1
}

pbcf() {
    cat $1 | pbcopy
}

## sigma

### navigation

switch() {


    repo="$(ls ~/sigma | fzf +i +m -e)"
    cd ~/sigma/${repo}
}

### auth

gcloud-auth() {
    gcloud auth login
}

aws-auth() { 
    gimme-aws-creds --profile ${1}
    export AWS_PROFILE="${1}"
}

### sig-kubeapply

ka-clean() {
    rm -rf ~/sigma/k8s-configs/expanded/$1
    git checkout -- ~/sigma//k8s-configs/expanded/$1
}

ka-diff() {
    subpath=""

    if [ "$#" -eq 2 ]; then
        subpath="--subpath ${2}"
    fi

    echo $subpath

    eval "kubeapply expand ~/sigma/k8s-configs/kubeapply-conf/local/$1.yaml" 
    eval "kubeapply diff ~/sigma/k8s-configs/kubeapply-conf/local/$1.yaml ${subpath}"

    ka-clean $1
}

ka-apply() {
    subpath=""

    if [ "$#" -eq 2 ]; then
        subpath="--subpath ${2}"
    fi

    echo $subpath

    eval "kubeapply expand ~/sigma/k8s-configs/kubeapply-conf/local/$1.yaml" 
    eval "kubeapply apply ~/sigma/k8s-configs/kubeapply-conf/local/$1.yaml ${subpath}"

    ka-clean $1
}

### tf/tg

tg-clean() {
    find /Users/austinsherron/sigma/sigma-terraform/$1/$2/ -name ".terra*" -exec rm -rf {} +
    rm -rf /Users/austinsherron/sigma/sigma-terraform/$1/$2/out
}

### k8s

get-tls-cert() {
    extract=""

    if [[ "${2}" = "-e" ]]; then
        extract=" | grep -i \"not after\""
    elif [[ "${2}" = "-d" ]]; then
        extract=" | grep -i \"dns\""
    fi

    kc get secret "${1}" -o jsonpath='{.data.tls\.crt}' | base64 -d | openssl x509 -noout -text"${extract}"
}

## veracrypt 

alias veracrypt="/Applications/VeraCrypt.app/Contents/MacOS/VeraCrypt --text"
alias fix-veracrypt="sudo /usr/bin/kmutil unload -b io.macfuse.filesystems.macfuse"

vc-mount() {
    veracrypt --mount "${1}" --mount "${2}" --pim "${3}" --keyfiles "" --protect-hidden no --verbose
}

vc-dismount() {
    veracrypt --dismount "${1}"
}

vc-dismount-all() {
    vc-dismount
}

## known volumes

vc-mount-vlt() {
    vc-mount "/Volumes/DukeOfMoles/Encrypted" "/Volumes/Vault" "0"
}

vc-dismount-vlt() {
    vc-dismount "/Volumes/DukeOfMoles/Encrypted" "${@}"
}

vc-mount-bkup() {
    vc-mount "/Volumes/VcntOfVoles/Encrypted" "/Volumes/Backup" "0"
}

vc-dismount-bkup() {
    vc-dismount "/Volumes/VcntOfVoles/Encrypted" 
}

vc-mount-dp-frz() {
    vc-mount "/Volumes/DaneOfDucks/Encrypted" "/Volumes/Deep\ Freeze" "0"
}

vc-dismount-dp-frz() {
    vc-dismount "/Volumes/DaneOfDucks/Encrypted" 
}

vc-mount-keys() {
    vc-mount "/Volumes/BreakGlass/Encrypted" "/Volumes/Keys" "0"
}

vc-dismount-keys() {
    vc-dismount "/Volumes/BreakGlass/Encrypted" 
}

## encrypted volume 

init-vlt() {
    fix-veracrypt
    vc-mount-vlt
}

term-vlt() {
    vc-dismount-vlt "${@}"
    sudo diskutil eject "/Volumes/DukeOfMoles" 
}

init-bkup() {
    fix-veracrypt
    vc-mount-bkup
}

term-bkup() {
    vc-dismount-bkup
    sudo diskutil eject "/Volumes/VcntOfVoles"
}

init-dp-frz() {
    fix-veracrypt
    vc-mount-dp-frz
}

term-dp-frz() {
    vc-dismount-dp-frz
    sudo diskutil eject "/Volumes/DaneOfDucks"
}

init-keys() {
    fix-veracrypt
    vc-mount-bkup
    vc-mount-keys
}

term-keys() {
    vc-dismount-bkup
    sudo diskutil eject "/Volumes/BreakGlass"
}

init-all() {
    fix-veracrypt
    vc-mount-vlt
    vc-mount-bkup
    vc-mount-keys
}

term-all() {
    vc-dismount-all
    sudo diskutil eject "/Volumes/DukeOfMoles"
    sudo diskutil eject "/Volumes/VcntOfVoles"
    sudo diskutil eject "/Volumes/DaneOfDucks"
    sudo diskutil eject "/Volumes/BreakGlass"
}

## keepassxc 

alias keepassxc="/Applications/KeePassXC.app/Contents/MacOS/keepassxc-cli"

open-vlt() {
    keepassxc open /Volumes/Vault/Secrets/Passwords.kdbx -y 2
}

open-vlt-gui() {
    open /Volumes/Vault/Secrets/Passwords.kdbx -a /Applications/KeePassXC.app
}

get-pw() {
    keepassxc clip /Volumes/Vault/Secrets/Passwords.kdbx "${1}" "${2}" -b -y 2    
}

## gpg 

gpg-decrypt() {
    if [[ "${1}" != "-c" ]]; then
        gpg --decrypt "${from}"
        return
    fi

    pbpaste > msg
    gpg --decrypt msg
    rm msg
}


gpg-verify() {
    pbpaste > fle
    gpg --verify fle
    rm fle
}

gpg-export() {
    mkdir gpg-keychain
    cd gpg-keychain

    gpg --armor --export-secret-keys > priv.asc
    gpg --armor --export > pub.asc
    gpg --armor --export-ownertrust > trust.asc

    if [[ "${1}" != "-c" ]]; then
        return
    fi

    cp ~/.gnupg/dirmngr.conf .
    cp ~/.gnupg/gpg-agent.conf .
    cp ~/.gnupg/gpg.conf .
    cd -
}

## 2-fa 

2-fa() {
    gpg-decrypt -c | grep "${1}" | cut -d ':' -f2 | xargs | pbcopy 
}

ab-2fa() {
    2-fa "Your AlphaBay 2-FA Code: " 
}

bh-2fa() {
    2-fa "Your authorization code is: "
}

bh-2fa() {
    2-fa "Your authorization code is: "
}

ic-2fa() {
    2-fa "Incognito Verification Token: "
}

## crypto

as-qr() {
   qrencode -o qr.png "$1:$2?amount=$3" 
}

xmr-qr() {
    as-qr "monero" $1 $2
    open qr.png
}

btc-qr() {
    as-qr "bitcoin" $1 $2
    open qr.png
}

## bash ########################################################################

## colors

export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
export JQ_COLORS="1;36:0;39:0;39:0;39:0;32:1;39:1;39"

## oh-my-bash ##################################################################

# Path to your oh-my-bash installation.
export OSH=/Users/austinsherron/.oh-my-bash

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-bash is loaded.
OSH_THEME="powerline"
# OSH_THEME="clean"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_OSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $OSH/custom?
# OSH_CUSTOM=/path/to/new-custom-folder

# Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
# Custom completions may be added to ~/.oh-my-bash/custom/completions/
# Example format: completions=(ssh git bundler gem pip pip3)
# Add wisely, as too many completions slow down shell startup.
completions=(
  awscli
  composer
  git
  go
  kubectl
  pip3
  ssh
  terraform
  tmux
)

# Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
# Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
# Example format: aliases=(vagrant composer git-avh)
# Add wisely, as too many aliases slow down shell startup.
aliases=(
  general
)

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
# Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  kubectl
)

source $OSH/oh-my-bash.sh

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='nvim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-bash libs,
# plugins, and themes. Aliases can be placed here, though oh-my-bash
# users are encouraged to define aliases within the OSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias bashconfig="mate ~/.bashrc"
# alias ohmybash="mate ~/.oh-my-bash"


################################################################################
## archived settiings 
################################################################################


## nvm #########################################################################

# (commented out until I can figure out why this is causing problems, 09/17/2022)

# export NVM_DIR="$HOME/.nvm"
# [ -s "/usr/local/opt/nvm/nvm.sh"  ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

